//  Copyright (c) 2015 Simul Software Ltd. All rights reserved.

// PS4 register overrun - must fix
#pragma warning(disable:7203)

#include "shader_platform.sl"
#include "../SL/common.sl"
#include "../SL/render_states.sl"
#include "../SL/lightning_constants.sl"
#include "../SL/depth.sl"
#include "../SL/render_states.sl"
#include "../SL/noise.sl"

uniform Texture2D lightningTexture;
uniform Texture2D depthTexture;
uniform Texture2DMS<vec4> depthTextureMS;
uniform TextureCube cloudDepthTexture;
uniform Texture2D randomTexture;
 
shader vec4 PS_Random(posTexVertexOutput IN) : SV_TARGET
{
	// Range from -1 to 1.
	vec4 c=2.0*vec4(rand(IN.texCoords),rand(1.7*IN.texCoords),rand(0.11*IN.texCoords),rand(513.1*IN.texCoords))-1.0;
	//vec4 c=vec4(SphericalRandom(IN.texCoords),2.0*rand(513.1*IN.texCoords)-1.0);
    return c;
}

struct F_Vertex
{
    vec3 position	: POSITION;
    vec2 texcoord	: TEXCOORD0;
    float progress	: TEXCOORD1;
};

struct F_IdVertex
{
    vec3 position	: POSITION;
    vec2 texcoord	: TEXCOORD0;
    float progress	: TEXCOORD1;
	uint vertex_id	: TEXCOORD2;
};

struct F_Vertex_out
{
    vec4 hPosition	: SV_Position;
};

shader F_Vertex VS_InitialFractal(idOnly IN )
{
	F_Vertex OUT;
	OUT.texcoord	=vec2(200.0,1.0);
	OUT.position	=lerp(startPos,endPos,float(IN.vertex_id));
	OUT.progress	=float(IN.vertex_id)/float(129.0);
	return OUT;
}

[maxvertexcount(129)]
shader void GS_Fractal(line F_Vertex IN[2],inout PointStream<F_Vertex> vStream)
{
	F_Vertex OUT;
	vec3 startP			=IN[0].position;
	vec3 endP			=IN[1].position;
	uint MAX_OCTAVES	=7;
	uint num_steps		=1<<MAX_OCTAVES;
	uint num_pts		=num_steps+1;
	vec3 outpos[129];
	outpos[0]			=startP;
	outpos[num_steps]	=endP;
	int del				=int(num_steps);
	float persistence	=0.8;
	vec3 off			=vec3(1.0,1.0,vertical)*roughness;
	float time			=phaseTime;
	for(uint i=0;i<MAX_OCTAVES;i++)
	{
		for(uint j=del/2;j<num_steps;j+=del)
		{
			// j is the index into the list of outputs.
			vec3 s				=outpos[j-del/2];
			vec3 e				=outpos[j+del/2];
			vec3 XX				=cross(vec3(1.0,0.0,0.0),(s-e));
			vec3 YY				=cross(vec3(0.0,1.0,0.0),(s-e));
			vec3 x				=0.5*(s+e);
			vec2 noise_texc		=vec2(9.3*float(j+randomSeed)+time,3.1*float(i)+4.5*float(j));
			vec4 noise_lookup	=texture_wrap_lod(randomTexture,noise_texc,0);
			float angle			=noise_lookup.x*2.0*3.14159;
			x					+=off*noise_lookup.y*(XX*cos(angle)+YY*sin(angle));
			outpos[j]			=x;
		}
		del	/=2;
		time*=2.0;
	//	off	*=persistence;
	}
	//outpos[0]			=startP+0.25*(startP-endP);
	float t				=strikeThicknessMetres;//*100;
	for(uint ii=0;ii<num_pts;ii++)
	{
		float c=saturate(float(ii)/9.0)*saturate(float(num_pts-ii)/9.0);
		OUT.position		=outpos[ii];
		OUT.texcoord		=vec2(t,brightness);
		OUT.progress		=ii/float(num_pts);
		vStream.Append(OUT);
		t					=strikeThicknessMetres;
	}
	vStream.RestartStrip();
}

shader F_IdVertex VS_Branch(F_Vertex IN,uint vertex_id: SV_VertexID)
{
	F_IdVertex OUT;
	OUT.position	=IN.position;
	OUT.texcoord	=IN.texcoord;
	OUT.vertex_id	=vertex_id;
	OUT.progress	=IN.progress;
	return OUT;
}

[maxvertexcount(33)]
shader void GS_Branch(line F_IdVertex IN[2], inout PointStream<F_Vertex> vStream)
{
	// do we branch from this point?
	uint parent_point=IN[0].vertex_id;
	//if(parent_point %branchInterval)
	//	return;

	F_Vertex OUT;
	vec3 startP		=IN[0].position;
	vec3 parentEndP	=IN[1].position;
	vec3 parentDir	=normalize(parentEndP-startP);
	// dir is the direction of the main branch.
	// We need to find a direction normal to dir.
	// We will create a random vector, then subtract the part that is in the direction of dir.
	vec2 noise_texc	=vec2(0.3*float(branchInterval)*float(randomSeed)+0.77*float(parent_point)
		,1.92*float(branchInterval)+0.34*float(parent_point));
	vec3 rndvec		=texture_wrap_lod(randomTexture,noise_texc,0).xyz;

	float along		=dot(rndvec,parentDir);
	rndvec			-=along*parentDir;
	rndvec			=normalize(rndvec);
	vec3 dir		=parentDir*cos(branchAngleRadians)+rndvec*sin(branchAngleRadians);
	vec3 adj		=vec3(1.0,1.0,vertical);
	dir				*=adj;
	dir				=normalize(dir);
	vec3 off		=adj*roughness;

	vec3 endP		=startP+dir*branchLengthMetres;

	int num_steps	=1<<num_octaves;
	int num_pts		=num_steps+1;
	vec3 outpos[33];
	outpos[0]			=startP;
	outpos[num_steps]	=endP;
	int del				=num_steps;
	float persistence	=0.8;
	//float off			=roughness;
	float time			=phaseTime;
	for(int i=0;i<num_octaves;i++)
	{
		for(int j=del/2;j<num_steps;j+=del)
		{
			vec3 s=outpos[j-del/2];
			vec3 e=outpos[j+del/2];
			vec3 XX=cross(vec3(1.0,0.0,0.0),(s-e));
			vec3 YY=cross(vec3(0.0,1.0,0.0),(s-e));
			vec3 x=0.5*(s+e);
			vec2 noise_texc1		=vec2(5.7*i-9.3*j+time,3.1*i+4.5*j);
			vec4 noise_lookup	=texture_wrap_lod(randomTexture,noise_texc1,0);
			float angle			=noise_lookup.x*2.0*3.14159;
			x+=off*(XX*cos(angle)+YY*sin(angle));
			outpos[j]=x;
		}
		del/=2;
		//off*=persistence;
		time*=2.0;
	}

	OUT.position		=outpos[0];
	OUT.position		-=dir;
	OUT.texcoord		=vec2(strikeThicknessMetres,1.0);
	OUT.progress		=IN[0].progress;
	vStream.Append(OUT);

	for(int ii=0;ii<num_pts;ii++)
	{
		float c				=saturate(float(num_pts-ii)/5.0);
		OUT.position		=outpos[ii];
		float br			=brightness*saturate(float(num_steps-ii)/5.0);
		float endpoint		=float(ii>(num_steps-2));
		OUT.texcoord		=c*vec2(strikeThicknessMetres,br);
		OUT.progress		=IN[0].progress+float(ii)/float(num_pts);
		vStream.Append(OUT);
	}
	vStream.RestartStrip();
}

VertexShader vs_init		=CompileShader(vs_5_0,VS_InitialFractal());
GeometryShader gs_fractal	=CompileShader(gs_5_0,GS_Fractal());
#ifdef __PSSL__
GeometryShader so_fractal	=ConstructGSWithSO(gs_fractal,"0,24,0:0:S_POSITION.xyz,12:0:TEXCOORD0.xy,20:0:TEXCOORD1.x");
#else
GeometryShader so_fractal	=ConstructGSWithSO(gs_fractal,"POSITION.xyz;TEXCOORD0.xy;TEXCOORD1.x");
#endif
VertexShader vs_branch		=CompileShader(vs_5_0,VS_Branch());
GeometryShader gs_branch	=CompileShader(gs_5_0,GS_Branch());
#ifdef __PSSL__
GeometryShader so_branch	=ConstructGSWithSO(gs_branch,"0,24,0:0:S_POSITION.xyz,12:0:TEXCOORD0.xy,20:0:TEXCOORD1.x");
#else
GeometryShader so_branch	=ConstructGSWithSO(gs_branch,"POSITION.xyz;TEXCOORD0.xy;TEXCOORD1.x");
#endif

technique initial_fractal
{
    pass main
    {
        SetRasterizerState( RenderNoCull );
        SetVertexShader(vs_init);
        SetGeometryShader(so_fractal);
		SetPixelShader(NULL);
    }
}

technique branch_fractal
{
    pass main
    {
        SetRasterizerState(RenderNoCull);
        SetVertexShader(vs_branch);
        SetGeometryShader(so_branch);
		SetPixelShader(NULL);
    }
}

struct transformedVertex
{
    vec4 hPosition		: SV_POSITION;
	float brightness	: TEXCOORD0;
    vec2 hPosCentre1	: TEXCOORD1;
    vec2 hPosCentre2	: TEXCOORD2;
	vec2 screenPos		: TEXCOORD3;
	vec2 texc			: TEXCOORD4;
    float along			: TEXCOORD5;
	float clipWidth		: TEXCOORD6;
    vec4 clipPos		: TEXCOORD7;
    float endpoint		: TEXCOORD8;
    float progress		: TEXCOORD9;
	vec3 view			: TEXCOORD10;
};

struct transformedThinVertex
{
    vec4 hPosition		: SV_POSITION;
	float brightness	: TEXCOORD0;
    float depth			: TEXCOORD1;
	vec2 screenPos		: TEXCOORD2;
	vec2 texc			: TEXCOORD3;
	float progress		: TEXCOORD4;
	vec3 view			: TEXCOORD5;
};

shader transformedThinVertex VS_Thin(LightningVertexInput IN)
{
    transformedThinVertex OUT;
    OUT.hPosition	=mul(worldViewProj, vec4(IN.position.xyz , 1.0));
	OUT.view		=vec3(0,1,0);//normalize(IN.position.xyz-viewPosition);
	OUT.brightness	=IN.texCoords.y*10.0;
	OUT.depth		=OUT.hPosition.z/OUT.hPosition.w;
	OUT.screenPos	=OUT.hPosition.xy/OUT.hPosition.w;
	OUT.texc		=OUT.screenPos.xy*0.5+0.5;
	OUT.progress	=IN.progress;
    return OUT;
}

shader LightningVertexOutput VS_Thick(LightningVertexInput IN)
{
    LightningVertexOutput OUT;
    OUT.position		=mul(worldViewProj,vec4(IN.position.xyz,1.0));
	OUT.view			=normalize(IN.position.xyz-viewPosition);
	OUT.thicknessMetres	=IN.texCoords.x;
	OUT.endpoint		=saturate(1.0-IN.texCoords.y);
	OUT.brightness		=IN.texCoords.y;
	OUT.progress		=IN.progress;
	OUT.depth			=OUT.position.z/OUT.position.w;
    return OUT;
}

vec2 PixelPos(vec4 vertex)
{
	return vec2(vertex.xy/vertex.w)*viewportPixels;
}

[maxvertexcount(10)]
shader void GS_Thick(lineadj LightningVertexOutput IN[4], inout TriangleStream<transformedVertex> SpriteStream)
{
	transformedVertex OUT;
    //  a - - - - - - - - - - - - - - - - b
    //  |      |                   |      |
    //  |      |                   |      |
    //  |      |                   |      |
    //  | - - -start - - - - - - end- - - |
    //  |      |                   |      |
    //  |      |                   |      |
    //  |      |                   |      |
    //  d - - - - - - - - - - - - - - - - c
	vec2 p0		=PixelPos(IN[0].position);
	vec2 p1		=PixelPos(IN[1].position);
	vec2 p2		=PixelPos(IN[2].position);
	vec2 p3		=PixelPos(IN[3].position);
	vec2 area	=viewportPixels * 1.2;
	if((p1.x<-area.x&&p2.x<-area.x)||(p1.x>area.x&&p2.x>area.x)) return;
	if((p1.y<-area.y&&p2.y<-area.y)||(p1.y>area.y&&p2.y>area.y)) return;
	if(IN[0].position.z<0) return;
    vec4 start			=IN[1].position;
    vec4 end			=IN[2].position;
	// determine the direction of each of the 3 segments (previous, current, next
	vec2 v0				=normalize(p1-p0);
	vec2 v1				=normalize(p2-p1);
	vec2 v2				=normalize(p3-p2);
	// determine the normal of each of the 3 segments (previous, current, next)
	vec2 n0				=vec2(-v0.y,v0.x);
	vec2 n1				=vec2(-v1.y,v1.x);
	vec2 n2				=vec2(-v2.y,v2.x);
	// determine mitre lines by averaging the normals of the 2 segments
	vec2 mitre1			=normalize(n0 + n1);	// mitre at start of current segment
	vec2 mitre2			=normalize(n1 + n2);	// mitre at end of current segment
	// determine the length of the mitre by projecting it onto normal and then inverse it

	//We want to have an output brightness*pixelWidth as specified according to thicknessMetres and input brightness.
	// so K=IN[1].brightness*(width1/start.w	*viewportPixels.x)
	// But: first we have a minimum pixel width. So if (width1/start.w	*viewportPixels.x)<minPixelWidth, we want brightness=K/minPixelWidth
	// And second we have a maximum output brightness, so if brightness>maxBrightness, we want pixelWidth=K/maxBrightness
	float l					=length(p2-p1);
	float t1				=min(0.5*l,IN[1].thicknessMetres);
	float t2				=min(0.5*l,IN[2].thicknessMetres);
	float truePixelWidth1	=(t1/start.w*viewportPixels.x);
	float truePixelWidth2	=(t2/start.w*viewportPixels.x);
	float K1				=IN[1].brightness*truePixelWidth1;
	float K2				=IN[2].brightness*truePixelWidth2;
	float brightness1		=IN[1].brightness;
	float brightness2		=IN[2].brightness;

	float width1			=t1;
	float width2			=t2;
	float maxBrightness		=1000.0;
	// Overbright? Make pixel width larger:
	if(brightness1>maxBrightness)
	{
		width1				*=brightness1/maxBrightness;
		brightness1			=maxBrightness;
	}
	if(brightness2>maxBrightness)
	{
		width2				*=brightness2/maxBrightness;
		brightness2			=maxBrightness;
	}
	//pixel size too small? make it up to the minimum, but scale down the brightness:
	if(width1<minPixelWidth/viewportPixels.x*start.w)
	{
		brightness1			*=width1/(minPixelWidth/viewportPixels.x*start.w);
		width1				=minPixelWidth/viewportPixels.x*start.w;
	}
	if(width2<minPixelWidth/viewportPixels.x*start.w)
	{
		brightness2			*=width2/(minPixelWidth/viewportPixels.x*start.w);
		width2				=minPixelWidth/viewportPixels.x*start.w;
	}
	float lengthPixels_a	=width1/start.w	*viewportPixels.x/dot(mitre1, n1);
	float lengthPixels_b	=width2/end.w	*viewportPixels.x/dot(mitre2, n1);
	float	mitre_LIMIT	=0.0;
	OUT.hPosCentre1		=vec2(p1.xy/viewportPixels);
	OUT.hPosCentre2		=vec2(p2.xy/viewportPixels);
	OUT.clipWidth		=width1/start.w;
	vec2 diff				=OUT.hPosCentre2-OUT.hPosCentre1;
	float dist				=length(diff);
	float d2				=dist*dist;
	// prevent excessively long mitres at sharp corners
	vec2 mitre1_a=mitre1;
	vec2 mitre1_b=mitre1;
	if( dot(v0,v1) < -mitre_LIMIT )
	{
		if(dot(v0,n1)>0)
		{
			mitre1_a = n1;
		}
		else
		{
			mitre1_b = n1;
		}
		lengthPixels_a = width1;
	}
	//OUT.view=vec3(1,0,0);
	OUT.view		=(IN[1].view);
	if(dot(v0,v1)<-mitre_LIMIT)
	{
	//	width1=0;
		//mitre1 = n1;
		//lengthPixels_a = width1;
		// close the gap
		if(dot(v0,n1)>0)
		{
			OUT.screenPos	=(p1 + width1 * n0)/viewportPixels;
			OUT.hPosition	=vec4(OUT.screenPos.xy*start.w,start.z,start.w);
		//	OUT.view		=(IN[0].view);
			OUT.texc		=OUT.screenPos.xy*0.5+0.5;
			OUT.along		=0;
			OUT.brightness	=brightness1;
			OUT.endpoint	=IN[1].endpoint;
			OUT.progress	=IN[1].progress;
			OUT.clipPos		=OUT.hPosition;
			SpriteStream.Append(OUT);
			OUT.screenPos	=(p1 + width1 * n1)/viewportPixels;
			OUT.hPosition	=vec4(OUT.screenPos.xy*start.w,start.z,start.w);
			OUT.texc		=OUT.screenPos.xy*0.5+0.5;
			OUT.along		=0;
			OUT.brightness	=brightness1;
			OUT.endpoint	=IN[1].endpoint;
			OUT.progress	=IN[1].progress;
			OUT.clipPos		=OUT.hPosition;
			SpriteStream.Append(OUT);
			OUT.screenPos	=(p1- lengthPixels_a * mitre1_b)/viewportPixels;
			OUT.hPosition	=vec4(OUT.screenPos.xy*start.w,start.z,start.w);
			OUT.texc		=OUT.screenPos.xy*0.5+0.5;
			OUT.along		=0;
			OUT.brightness	=brightness1;
			OUT.endpoint	=IN[1].endpoint;
			OUT.progress	=IN[1].progress;
			OUT.clipPos		=OUT.hPosition;
			SpriteStream.Append(OUT);
			SpriteStream.RestartStrip();
		}
		else
		{
			OUT.screenPos	=(p1 - width2 * n1)/viewportPixels;
			OUT.hPosition	=vec4(OUT.screenPos.xy*start.w,start.z,start.w);
		//	OUT.view		=(IN[1].view);
			OUT.texc		=OUT.screenPos.xy*0.5+0.5;
			OUT.along		=0;
			OUT.brightness	=brightness1;
			OUT.endpoint	=IN[1].endpoint;
			OUT.progress	=IN[1].progress;
			OUT.clipPos		=OUT.hPosition;
			SpriteStream.Append(OUT);
			OUT.screenPos	=(p1 - width2 * n0)/viewportPixels;
			OUT.hPosition	=vec4(OUT.screenPos.xy*start.w,start.z,start.w);
			OUT.texc		=OUT.screenPos.xy*0.5+0.5;
			OUT.along		=0;
			OUT.brightness	=brightness1;
			OUT.endpoint	=IN[1].endpoint;
			OUT.progress	=IN[1].progress;
			OUT.clipPos		=OUT.hPosition;
			SpriteStream.Append(OUT);
			OUT.screenPos	=(p1+ lengthPixels_a * mitre1_a)/viewportPixels;
			OUT.hPosition	=vec4(OUT.screenPos.xy*start.w,start.z,start.w);
			OUT.texc		=OUT.screenPos.xy*0.5+0.5;
			OUT.along		=0;
			OUT.brightness	=brightness1;
			OUT.endpoint	=IN[1].endpoint;
			OUT.progress	=IN[1].progress;
			OUT.clipPos		=OUT.hPosition;
			SpriteStream.Append(OUT);
			SpriteStream.RestartStrip();
		}
	}
	vec2 mitre2_a=mitre2;
	vec2 mitre2_b=mitre2;
	if( dot(v1,v2) < -mitre_LIMIT )
	{
		if(dot(v1,n2)>0)
		{
			mitre2_a = n1;
		}
		else
		{
			mitre2_b = n1;
		}
		lengthPixels_b = width2;
	}
  // generate the triangle strip
	OUT.clipWidth		=width1/start.w;
	OUT.screenPos		=(p1 + lengthPixels_a * mitre1_a)/viewportPixels;
	OUT.hPosition		=vec4(OUT.screenPos.xy*start.w,start.z,start.w);
//	OUT.view			=(IN[1].view);
	OUT.texc			=OUT.screenPos.xy*0.5+0.5;
	OUT.along			=0.0;//dot(OUT.screenPos.xy-OUT.hPosCentre1.xy,diff)/d2*1.1-0.05;
	OUT.brightness		=brightness1;
	OUT.endpoint		=IN[1].endpoint;
			OUT.progress	=IN[1].progress;
	OUT.clipPos			=OUT.hPosition;
	SpriteStream.Append(OUT);
	OUT.screenPos		=(p1 - lengthPixels_a * mitre1_b)/viewportPixels;
	OUT.hPosition		=vec4(OUT.screenPos.xy*start.w,start.z,start.w);
	OUT.texc			=OUT.screenPos.xy*0.5+0.5;
	OUT.along			=0.0;//dot(OUT.screenPos.xy-OUT.hPosCentre1.xy,diff)/d2;
	OUT.brightness		=brightness1;
	OUT.endpoint		=IN[1].endpoint;
			OUT.progress	=IN[1].progress;
	OUT.clipPos			=OUT.hPosition;
	SpriteStream.Append(OUT);
	OUT.clipWidth		=width2/end.w;
	OUT.screenPos		=(p2 + lengthPixels_b * mitre2_a)/viewportPixels;
	OUT.hPosition		=vec4(OUT.screenPos.xy*end.w,end.z,end.w);
//	OUT.view			=(IN[2].view);
	OUT.texc			=OUT.screenPos.xy*0.5+0.5;
	OUT.along			=1.0;//dot(OUT.screenPos.xy-OUT.hPosCentre1.xy,diff)/d2;
	OUT.brightness		=brightness2;
	OUT.endpoint		=IN[2].endpoint;
	OUT.progress		=IN[2].progress;
	OUT.clipPos			=OUT.hPosition;
	SpriteStream.Append(OUT);
	OUT.screenPos		=(p2 - lengthPixels_b * mitre2_b)/viewportPixels;
	OUT.hPosition		=vec4(OUT.screenPos.xy*end.w,end.z,end.w);
//	OUT.view			=(IN[2].view);
	OUT.texc			=OUT.screenPos.xy*0.5+0.5;
	OUT.along			=1.0;//dot(OUT.screenPos.xy-OUT.hPosCentre1.xy,diff)/d2;
	OUT.brightness		=brightness2;
	OUT.endpoint		=IN[2].endpoint;
	OUT.progress		=IN[2].progress;
	OUT.clipPos			=OUT.hPosition;
	SpriteStream.Append(OUT);
    SpriteStream.RestartStrip();
}

vec4 PS_Main(transformedVertex IN,bool reverseDepth)
{
	DepthInterpretationStruct depthInterpretationStruct;
	depthInterpretationStruct.depthToLinFadeDistParams=depthToLinFadeDistParams;
	depthInterpretationStruct.reverseDepth=reverseDepth;
	vec2 texc				=vec2(IN.texc.x,1.0-IN.texc.y);
	vec2 screen_texc		=vec2(0.5*(IN.clipPos.x/IN.clipPos.w+1.0),0.5*(1.0-IN.clipPos.y/IN.clipPos.w));
	vec2 depth_texc			=viewportCoordToTexRegionCoord(screen_texc,viewportToTexRegionScaleBias);
	vec4 dlookup 			=texture_clamp(depthTexture,depth_texc.xy);
	vec3 view				=normalize(IN.view);
	vec4 nearFarCloud 		=texture_cube_lod(cloudDepthTexture,view,0);

	vec4 clip_pos			=vec4(IN.screenPos,1.0,1.0);
	float l_depth			=IN.clipPos.z/IN.clipPos.w;
	vec2 dist				=depthToFadeDistance(vec2(l_depth,dlookup.x),IN.screenPos.xy,depthInterpretationStruct,tanHalfFov);

	float past				=saturate((nearFarCloud.w-dist.x)/0.008+1.0);
	past					*=saturate((dist.y-dist.x)/0.01-0.9);
	
	vec2 dir				=normalize(IN.hPosCentre2-IN.hPosCentre1);
	float along				=dot(IN.screenPos-IN.hPosCentre1,dir);
	vec2 centre1			=lerp(IN.hPosCentre1,IN.hPosCentre2,saturate(IN.along));
	vec2 centre2			=lerp(IN.hPosCentre1,IN.hPosCentre2,saturate(along));
	vec2 diff1				=IN.screenPos-centre1;
	vec2 diff2				=IN.screenPos-centre2;
	float clipWidth2px		=minPixelWidth/float(viewportPixels.x);
	float d					=min(length(diff1),length(diff2));
	float m					=d/clipWidth2px;
	float s					=max(0.0,d-clipWidth2px)/IN.clipWidth;
	
	float br				=saturate(2.0*(1.0-m));
	br						+=brightnessToUnity*saturate(exp(-4.0*s)-0.05)/0.95;
	br						*=IN.brightness;
	br						*=saturate((exp(-4.0*s)-0.05)/0.95);
	if(progress>0.0)
	{
		float p				=abs(IN.progress-progress);
		s*=4;
		// brightness max is 1/10th of full strike brightness, say.
		float a				=0.1*saturate(100.0*(progress-IN.progress)-3.0);
	//	br					*=saturate((exp(-4.0*s)-0.05)/0.95);
		float b				=10.0*exp(-p*p/0.0001);
		br					*=a+b;
	}
	br*=past;
	if(br<0)
		br=0;
	vec4 colour			=vec4(br*lightningColour.rgb,1.0);//lightningTexture.Sample(clampSamplerState,IN.texCoords.xy);
	//colour			*=saturate(1.0-(dist.y-dist.x)/0.001);
	//colour.rgb=past;
    return colour;
}

shader vec4 PS_Main_ReverseDepth(transformedVertex IN): SV_TARGET
{
	return PS_Main(IN,true);
}

shader vec4 PS_Main_ForwardDepth(transformedVertex IN): SV_TARGET
{
	return PS_Main(IN,false);
}

vec4 PS_Thin(transformedThinVertex IN,bool reverseDepth)
{
	vec2 texc=vec2(IN.texc.x,1.0-IN.texc.y);
	vec4 dlookup 		=texture_clamp(depthTexture,texc.xy);
	vec3 view				=normalize(IN.view);
	vec4 clookup 		=texture_cube_lod(cloudDepthTexture,view,0);
	float depth=0;
	if(reverseDepth)
		depth			=max(dlookup.x,clookup.x);
	else
		depth			=min(dlookup.x,clookup.x);
	DepthInterpretationStruct depthInterpretationStruct;
	depthInterpretationStruct.depthToLinFadeDistParams=depthToLinFadeDistParams;
	depthInterpretationStruct.reverseDepth=reverseDepth;
	vec2 dist			=depthToFadeDistance(vec2(depth,IN.depth),IN.screenPos.xy,depthInterpretationStruct,tanHalfFov);
	//if(dist.x<dist.y)
	//	discard;
	
	vec4 colour		=vec4(lightningColour,1.0)*IN.brightness;//;//lightningTexture.Sample(clampSamplerState,IN.texCoords.xy);
	colour			*=saturate(1.0-(dist.y-dist.x)/0.001);
    return colour;
}

shader vec4 PS_Thin_ReverseDepth(transformedThinVertex IN): SV_TARGET
{
	return PS_Thin(IN,true);
}

shader vec4 PS_Thin_ForwardDepth(transformedThinVertex IN): SV_TARGET
{
	return PS_Thin(IN,false);
}

BlendState MaxBlend
{
	BlendEnable[0]	=TRUE;
	BlendEnable[1]	=TRUE;
	SrcBlend		=ONE;
	DestBlend		=ONE;
	BlendOp			=MAX;
	RenderTargetWriteMask[0]=7;
	RenderTargetWriteMask[1]=7;
};

technique lightning_thick
{
    pass reverse_depth 
    {
		//SetDepthStencilState(TestReverseDepth,0);
        SetRasterizerState(RenderNoCull);
		SetBlendState(AddBlend,vec4(0.0f,0.0f,0.0f,0.0f),0xFFFFFFFF);
        SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_5_0,VS_Thick()));
        SetGeometryShader( CompileShader(gs_5_0,GS_Thick()));
		SetPixelShader(CompileShader(ps_5_0,PS_Main_ReverseDepth()));
    }
    pass forward_depth 
    {
		//SetDepthStencilState(TestForwardDepth,0);
        SetRasterizerState(RenderNoCull);
		SetBlendState(AddBlend,vec4(0.0f,0.0f,0.0f,0.0f),0xFFFFFFFF);
        SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_5_0,VS_Thick()));
        SetGeometryShader( CompileShader(gs_5_0,GS_Thick()));
		SetPixelShader(CompileShader(ps_5_0,PS_Main_ForwardDepth()));
    }
}
RasterizerState lightningLineRasterizer
{
	FillMode					= WIREFRAME;
	CullMode					= none;
	FrontCounterClockwise		= false;
	DepthBias					= 0;//DEPTH_BIAS_D32_FLOAT(-0.00001);
	DepthBiasClamp				= 0.f;
	SlopeScaledDepthBias		= 0.f;
	DepthClipEnable				= false;
	ScissorEnable				= false;
	MultisampleEnable			= true;
	AntialiasedLineEnable		= false;
};

technique lightning_thin
{
    pass reverse_depth 
    {
        SetRasterizerState(lightningLineRasterizer);
		SetBlendState(MaxBlend,vec4(0.0f,0.0f,0.0f,0.0f),0xFFFFFFFF);
        SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_5_0,VS_Thin()));
		SetPixelShader(CompileShader(ps_5_0,PS_Thin_ReverseDepth()));
    }
    pass forward_depth 
    {
        SetRasterizerState(lightningLineRasterizer);
		SetBlendState(MaxBlend,vec4(0.0f,0.0f,0.0f,0.0f),0xFFFFFFFF);
        SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_5_0,VS_Thin()));
		SetPixelShader(CompileShader(ps_5_0,PS_Thin_ForwardDepth()));
    }
}

technique random
{
    pass p0 
    {
		SetRasterizerState(RenderNoCull);
		SetDepthStencilState(DisableDepth,0);
		SetBlendState(NoBlend,vec4(1.0,1.0,1.0,1.0),0xFFFFFFFF);
        SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_4_0,VS_SimpleFullscreen()));
		SetPixelShader(CompileShader(ps_4_0,PS_Random()));
    }
}