//  Copyright (c) 2015-2016 Simul Software Ltd. All rights reserved.
#include "shader_platform.sl"
#include "../SL/common.sl"

uniform RWTexture1D<int4> DestTex1i : register(u0);
uniform Texture1D<int4> SourceTex1i : register(t0);

uniform RWTexture2D<int4> DestTex2i : register(u0);
uniform Texture2D<int4> SourceTex2i : register(t0);

uniform RWTexture3D<int4> DestTex3i : register(u0);
uniform Texture3D<int4> SourceTex3i : register(t0);

uniform RWTexture1D<float4> DestTex1 : register(u0);
uniform Texture1D<float4> SourceTex1 : register(t0);

uniform RWTexture2D<float4> DestTex2 : register(u0);
uniform Texture2D<float4> SourceTex2 : register(t0);

uniform RWTexture3D<float4> DestTex3 : register(u0);
uniform Texture3D<float4> SourceTex3 : register(t0);

#ifdef __PSSL__
CS_LAYOUT(64,1,1)
shader void Copy1DInt4( uint3 position : SV_DispatchThreadID )
{
	DestTex1i[position.x] = SourceTex1i.Load(int2(position.x, 0));
}
#endif

CS_LAYOUT(8,8,1)
shader void Copy2DInt4( uint3 position : SV_DispatchThreadID )
{
	DestTex2i[position.xy] = SourceTex2i.Load(int3(position.xy, 0));
}
CS_LAYOUT(4,4,4)
shader void Copy3DInt4( uint3 position : SV_DispatchThreadID )
{
	DestTex3i[position] = SourceTex3i.Load(int4(position, 0));
}

CS_LAYOUT(64,1,1)
shader void Copy1D( uint3 position : SV_DispatchThreadID )
{
	DestTex1[position.x] = SourceTex1.Load(int2(position.x, 0));
}

CS_LAYOUT(8,8,1)
shader void Copy2D( uint3 position : SV_DispatchThreadID )
{
	DestTex2[position.xy] =SourceTex2.Load(int3(position.xy, 0));
}

CS_LAYOUT(4,4,4)
shader void Copy3D( uint3 position : SV_DispatchThreadID )
{
	DestTex3[position] = SourceTex3.Load(int4(position.x, position.y, position.z, 0));
}

#ifdef __PSSL__
technique copy_1d_int4
{
    pass p0
    {
		SetComputeShader(CompileShader(cs_5_0,Copy1DInt4()));
    }
}
#endif
technique copy_2d_int4
{
    pass p0
    {
		SetComputeShader(CompileShader(cs_5_0,Copy2DInt4()));
    }
}

technique copy_3d_int4
{
    pass p0
    {
		SetComputeShader(CompileShader(cs_5_0,Copy3DInt4()));
    }
}

technique copy_1d
{
    pass p0
    {
		SetComputeShader(CompileShader(cs_5_0,Copy1D()));
    }
}

technique copy_2d
{
    pass p0
    {
		SetComputeShader(CompileShader(cs_5_0,Copy2D()));
    }
}

technique copy_3d
{
    pass p0
    {
		SetComputeShader(CompileShader(cs_5_0,Copy3D()));
    }
}