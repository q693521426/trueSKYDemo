//  Copyright (c) 2015 Simul Software Ltd. All rights reserved.
#include "shader_platform.sl"
#include "../SL/common.sl"
#include "../SL/render_states.sl"
#include "../SL/spherical_harmonics_constants.sl"
#include "../SL/noise.sl"
#include "../SL/spherical_harmonics.sl"
#include "../SL/light_probe_constants.sl"

#ifndef GLSL
#ifndef pi
#define pi (3.1415926536)
#endif
// A texture (l+1)^2 of basis coefficients.
uniform StructuredBuffer<vec4> basisBuffer;

uniform Texture2DArray<vec4> sourceTextureArray;
uniform Texture2D copySourceTexture;
uniform RWTexture2D<vec4> copyTargetTexture;

float WindowFunction(float x)
{
	return saturate((0.0001+sin(pi*x))/(0.0001+pi*x));
}

vec4 EvaluateSH(vec3 view)
{
	// convert spherical coords to unit vector 
	//	vec3 vec		=vec3(sin(theta)*cos(phi),sin(theta)*sin(phi),cos(theta)); 
	// Therefore as atan2(y,x) is the angle from the X-AXIS:
	float theta		=acos(view.z);
	float phi		=atan2(view.y,view.x);
	// SH(int l, int m, float theta, float phi) is the basis function/
	// return a point sample of a Spherical Harmonic basis function 
	vec4 result		=vec4(0,0,0,0);
	// Coefficients for 
	//A_0 = 3.141593	0,0
	//A_1 = 2.094395	1,-1 1,0 1,1
	//A_2 = 0.785398	2,-2 2,-1 2,0 2,1 2,2
	//A_3 = 0			3,-3 3,-2 3,-1 3,0 3,1 3,2 3,3
	//A_4 = -0.130900 
	//A_5 = 0 
	//A_6 = 0.049087 

	float A[]={		3.1415926
		,2.094395
		,0.785398
		,0		
		,-0.130900
		,0 
		,0.049087
		,0
		,-0.02454
		,0
		,0.014317154
		,0
		,-0.009203885
		,0
		,0.006327671
		,0
	};
	int n=0;
	for(int l=0;l<MAX_SH_BANDS;l++)
	{
		if (l >= numSHBands)
			break;
		float w =  WindowFunction(float(l) / float(numSHBands));
		for (int m = -l; m <= l; m++)
			result += basisBuffer[n++] * SH(l, m, theta, phi) *w *A[l] / 3.1415926;
	}
	return result;
}

shader vec4 PS_IrradianceMap(posTexVertexOutput IN) : SV_TARGET
{
	vec4 clip_pos	=vec4(-1.0,1.0,1.0,1.0);
	clip_pos.x		+=2.0*IN.texCoords.x;
	clip_pos.y		-=2.0*IN.texCoords.y;

	vec3 view		=mul(invViewProj,clip_pos).xyz;
	view			=normalize(view);
	vec4 result=EvaluateSH(view);
	//result.r = 0;
	//result.g= SH(4, -4, theta, phi);
	//result.b = -result.g;
	result.a=alpha;
	return max(result,vec4(0,0,0,0));
}

shader vec4 PS_BlendMip(posTexVertexOutput IN) : SV_TARGET
{
	// sourceTexture is the source mip. So we sample "mip level 0", actually just the only mip we have.
	// TODO: blend from surrounding texels.
	vec4 src_lookup=sourceTextureArray.SampleLevel(clampSamplerState,vec3(IN.texCoords.xy,0),0);
	src_lookup.a=alpha;
	return src_lookup;
}

shader vec4 PS_CopyFace(posTexVertexOutput IN) : SV_TARGET
{
	vec4 linear_src=copySourceTexture.SampleLevel(clampSamplerState,vec3(IN.texCoords.xy,0),0);
	vec4 result=linear_src;
	result.rgb*=copy_face_exposure;
	result.rgb=pow(result.rgb,vec3(copy_face_gamma,copy_face_gamma,copy_face_gamma));
	return result;
}

[numthreads(8,8,1)]
shader void CS_CopyFace(uint3 sub_pos: SV_DispatchThreadID)
{
	vec4 linear_src=copySourceTexture[sub_pos.xy];
	vec4 result=linear_src;
	result.rgb*=copy_face_exposure;
	result.rgb=pow(result.rgb,vec3(copy_face_gamma,copy_face_gamma,copy_face_gamma));
	copyTargetTexture[sub_pos.xy] =result;
}

BlendState ProbeBlend
{
	BlendEnable[0] = TRUE;
	SrcBlend = INV_SRC_ALPHA;
	DestBlend = SRC_ALPHA;
	BlendOp = ADD;
	SrcBlendAlpha = ONE;
	DestBlendAlpha = ZERO;
	BlendOpAlpha = ADD;
};

technique irradiance_map
{
    pass p0 
    {
		SetRasterizerState( RenderNoCull );
        SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_5_0,VS_SimpleFullscreen()));
		SetPixelShader(CompileShader(ps_5_0,PS_IrradianceMap()));
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(ProbeBlend, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
    }
}

technique blend_mip
{
    pass p0 
    {
		SetRasterizerState( RenderNoCull );
        SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_5_0,VS_SimpleFullscreen()));
		SetPixelShader(CompileShader(ps_5_0,PS_BlendMip()));
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(ProbeBlend, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
    }
}

technique overwrite_mip
{
    pass p0 
    {
		SetRasterizerState( RenderNoCull );
        SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_5_0,VS_SimpleFullscreen()));
		SetPixelShader(CompileShader(ps_5_0,PS_BlendMip()));
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
    }
}

technique compute_copy_face
{
    pass p0 
    {
		SetComputeShader(CompileShader(cs_5_0,CS_CopyFace()));
    }
}
technique copy_face
{
	pass p0 
	{
		SetRasterizerState( RenderNoCull );
        SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_5_0,VS_SimpleFullscreen()));
		SetPixelShader(CompileShader(ps_5_0,PS_CopyFace()));
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
	}
}
#endif
