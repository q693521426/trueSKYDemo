//  Copyright (c) 2015 Simul Software Ltd. All rights reserved.
#define USE_LIGHT_TABLES 1
#include "shader_platform.sl"
#include "../SL/common.sl"
#include "../SL/render_states.sl"

uniform sampler2D imageTexture;
uniform sampler2D noiseTexture;
uniform sampler2D coverageTexture;
uniform sampler2D lossTexture;
uniform Texture3D volumeInscatterTexture;
uniform TextureCube depthTexture;
uniform Texture2DMS<vec4> depthTextureMS;
uniform sampler2D illuminationTexture;
uniform sampler2D lightTableTexture;
/// The previous texture area:
uniform Texture2DArray updateTexture				;

uniform RWTexture2DArray<vec4> outputTexture		SIMUL_RWTEXTURE_REGISTER(0);

SamplerState samplerState 
{
	Filter = MIN_MAG_MIP_LINEAR;
	AddressU = Wrap;
	AddressV = Wrap;
};

#include "../SL/simul_2d_cloud_constants.sl"

SIMUL_CONSTANT_BUFFER(CloudStaticConstants,12)
	uniform mat4 cubeInvViewProj[6];	// Cubemap matrices
SIMUL_CONSTANT_BUFFER_END
#include "../SL/simul_inscatter_fns.sl"
#include "../SL/earth_shadow_uniforms.sl"
#include "../SL/earth_shadow.sl"
#include "../SL/earth_shadow_fade.sl"

#include "../SL/simul_2d_clouds.sl"
#include "../SL/simul_2d_cloud_detail.sl"
#include "../SL/depth.sl"
#include "../SL/debug_constants.sl"

struct a2v
{
    vec3 position		: POSITION;
	uint vertex_id		: SV_VertexID;
};

struct v2f
{
    vec4 hPosition		: SV_POSITION;
    vec4 clip_pos		: TEXCOORD0;
	vec3 wPosition		: TEXCOORD1;
};

v2f VSMain(a2v IN,bool reverseDepth)
{
	v2f OUT;
	OUT.hPosition		=vec4(IN.position,IN.position.z);
	OUT.clip_pos		=OUT.hPosition/OUT.hPosition.w;
	OUT.wPosition		=vec3(0,0,0);
	vec2 poss[4];
	poss[0]				=vec2( 1.0,-1.0);
	poss[1]				=vec2( 1.0, 1.0);
	poss[2]				=vec2(-1.0,-1.0);
	poss[3]				=vec2(-1.0, 1.0);
	vec2 p2				=poss[IN.vertex_id%uint(4)];
	OUT.hPosition		=vec4(.5*p2,0.0,1.0);
	OUT.hPosition.z		=0.0; 

	vec3 pos			=maxCloudDistanceMetres*IN.position.xyz;
	pos.z				+=origin.z;
	float Rh			=planetRadius+origin.z;
	float dist			=length(pos.xy);
	float vertical_shift=sqrt(Rh*Rh-dist*dist)-Rh;
	pos.z				+=vertical_shift;
	pos.xy				+=eyePosition.xy;
	OUT.clip_pos		=mul(worldViewProj,vec4(pos.xyz,1.0));
	// Prevent clipping:
	if(reverseDepth)
	{
		if(OUT.clip_pos.z<0)
			OUT.clip_pos.z=0;
	}
	else
	{
		if(OUT.clip_pos.z>OUT.clip_pos.w)
			OUT.clip_pos.z=OUT.clip_pos.w;
	}
	OUT.hPosition		=OUT.clip_pos;
    OUT.wPosition		=pos.xyz;
    return OUT;
}

shader v2f VS_Main(a2v IN)
{
	return VSMain(IN,false);
}

shader v2f VS_DepthForward(a2v IN)
{
	return VSMain(IN,false);
}

shader v2f VS_DepthReverse(a2v IN)
{
	return VSMain(IN,true);
}

struct FarNearPixelOutput
{
	vec4 farColour SIMUL_RENDERTARGET_OUTPUT(0);
	vec4 nearColour SIMUL_RENDERTARGET_OUTPUT(1);
};

struct v2f2
{
    vec4 hPosition	: SV_POSITION;
	vec2 texCoords	: TEXCOORD0;
};

shader v2f2 FullScreenVS(idOnly IN)
{
	v2f2 OUT;
	vec2 poss[4]=
	{
		{ 1.0, 0.0},
		{ 1.0, 1.0},
		{ 0.0, 0.0},
		{ 0.0, 1.0},
	};
	vec2 pos		=poss[IN.vertex_id];
	OUT.hPosition	=vec4(2.0*pos-vec2(1.0,1.0),0.0,1.0);
    OUT.texCoords	=pos;
    return OUT;
}

shader v2f2 SimpleVS(idOnly IN)
{
	v2f2 OUT;
	vec2 poss[4]=
	{
		{ 1.0, 0.0},
		{ 1.0, 1.0},
		{ 0.0, 0.0},
		{ 0.0, 1.0},
	};
	vec2 pos		=poss[IN.vertex_id];
	OUT.hPosition	=vec4(rect.xy+rect.zw*pos,0.0,1.0);
    OUT.texCoords	=pos;
    return OUT;
}

shader vec4 SimplePS(v2f2 IN) : SV_TARGET
{
	return texture_clamp(imageTexture,.5+IN.texCoords);
}

float NoiseFunction(Texture2D noiseTexture,vec2 pos,float octaves,float persistence,float time)
{
	float dens=0.0;
	float mult=0.5;
	float sum=0.0;
	float t=time;
	int i_oct=int(octaves+1.0);
	for(int i=0;i<5;i++)
	{
		if(i>=i_oct)
			break;
		float val=2.0*texture_wrap(noiseTexture,pos).x-1.0;
		dens+=mult*val;
		sum+=mult;
		mult*=persistence;
		pos*=2.0;
		t*=2.0;
	}
	dens/=sum;
	dens+=0.5;
	return saturate(dens);
}

vec4 Coverage(vec2 texCoords,float humidity,float diffusivity,float octaves,float persistence,float time,Texture2D noiseTexture)
{
	float noise_val			=NoiseFunction(noiseTexture,texCoords/* /noiseTextureScale */,octaves,persistence,time);
	float dens				=saturate((noise_val+2.0*humidity+diffusivity-2.0)/diffusivity);
	return vec4(dens,dens,dens,dens);
}

vec4 Clouds2DPS_illum(Texture2D detailTexture
					,Texture2D coverageTexture
					,Texture2D lossTexture
					,Texture3D volumeInscatterTexture,vec3 volumeTexCoordsXyC
					,Texture2D noiseTexture
					,vec2 texc_global
					,vec2 texc_detail
					,vec3 wEyeToPos
					,vec3 sun_irr
					,vec3 moon_irr
					,vec3 amb
					,vec3 lightDir
					,vec4 lightResponse
					,float maxFadeDistanceMetres
					,float detailDensity)
{
	//	return vec4(0,0,1,.5);
	vec3 view				=normalize(wEyeToPos);
	float sine				=view.z;
	vec2 texc_offset		=texc_detail/7.11;//offsetScale;
	vec4 noise				=texture_wrap_lod(noiseTexture,texc_offset,0);
	vec4 coverage			=texture_wrap_lod(coverageTexture,texc_global,0);

	vec4 detail				=texture_wrap_lod(detailTexture,texc_detail+.2*noise.xy,0);
	float dist_tc			=(length(wEyeToPos)/maxFadeDistanceMetres);
//	detail					=lerp(vec4(0.5,0.5,0.5,detailDensity),detail,saturate((abs(sine)+0.0001)));
	float opacity			=saturate(detail.a*coverage.x);
	float cos0				=dot(normalize(lightDir),view);
	float scattered_light	=exp(-detail.r*coverage.x*extinction);
	float hg				=HenyeyGreenstein(cloudEccentricity,cos0);

	vec2 fade_texc			=vec2(sqrt(dist_tc),0.5*(1.0-sine));

	vec3 loss				=texture_clamp_mirror_lod(lossTexture,fade_texc,0).rgb;

	float visible_light		=1;

	vec3 volumeTexCoords	=vec3(volumeTexCoordsXyC.xy,fade_texc.x);
	vec4 insc				=texture_3d_wwc_lod(volumeInscatterTexture,volumeTexCoords,0);

	vec3 light				=sun_irr*visible_light+moon_irr;
	vec4 colour				=vec4(light*(lightResponse.y+lightResponse.x*hg)*scattered_light+amb,opacity);

#ifdef INFRARED
	colour.rgb				=cloudIrRadiance.rgb;
#endif
	colour.rgb				*=loss;
	colour.rgb				+=insc.rgb*insc.a;

	return colour;
}

shader vec4 CoveragePS(v2f2 IN) : SV_TARGET
{
	return Coverage(IN.texCoords,humidity,coverageDiffusivity,coverageOctaves,coveragePersistence,time,noiseTexture);
}

shader vec4 ShowDetailTexturePS(v2f2 IN) : SV_TARGET
{
	float alt_texc		=0;//10000.0/maxAltitudeMetres;
	vec3 combinedLightColour	=texture_clamp_lod(lightTableTexture,vec2(alt_texc,3.5/4.0),0).rgb;
	vec2 texCoords			=IN.texCoords;
	texCoords+=0.5;
	vec4 detail				=texture_wrap(imageTexture,texCoords);
	float opacity			=saturate(detail.a);
	vec3 colour				=vec3(0.5,0.5,1.0);
	if(opacity<=0)
	{
		return vec4(colour,opacity);
	}
	float light				=exp(-detail.r*extinction);
	float scattered_light	=light;//detail.a*exp(-light*Y(coverage)*32.0);
	colour					=combinedLightColour*(lightResponse.y+lightResponse.x)*scattered_light;
	//colour=detail.r*.1;
	return vec4(colour,opacity);
}

float rand(vec2 co)
{
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

shader vec4 RandomPS(v2f2 IN) : SV_TARGET
{
    vec4 c	=vec4(rand(IN.texCoords),rand(1.7*IN.texCoords),rand(0.11*IN.texCoords),rand(513.1*IN.texCoords));
    return frac(c);
}


shader vec4 DetailPS(v2f2 IN) : SV_TARGET
{
    return DetailDensity(IN.texCoords,imageTexture,amplitude,density,detailDiffusivity,detailOctaves);
}

shader vec4 DetailLightingPS(v2f2 IN) : SV_TARGET
{
    return DetailLighting(imageTexture,IN.texCoords,vec2(detailTextureSize,detailTextureSize));
}

void CSClouds2D(uint3 pos,bool depth)
{
	// offset by one texel to allow -1 in x and y:
	vec2 texCoords			=(vec2(pos.xy)+vec2(0.5,0.5))/vec2(targetTextureSize1);
	vec4 clip_pos			=vec4(-1.0,1.0,1.0,1.0);

	clip_pos.x				+=2.0*texCoords.x;
	clip_pos.y				-=2.0*texCoords.y;

	vec3 view				=normalize(mul(cubeInvViewProj[pos.z],clip_pos).xyz);

	float dz				=cloudAltitudeKm-0.001*eyePosition.z;

	vec4 dist				=vec4(1.0,1.0,1.0,1.0);
	if(depth)
		dist				=texture_cube_lod(depthTexture,view,0);

	vec4 ret				=vec4(0,0,0,1.0);
#if 1
	if(dz>0||view.z<0)
	{
		float Rh				=6378.0+cloudAltitudeKm;
		float Rz				=6378.0+eyePosition.z*0.001;
		float b					=2.0*Rz*view.z;
		float c					=Rz*Rz-Rh*Rh;
		float U					=b*b-4*c;
	//	ret.rgb					=vec3(cloudAltitudeKm/10.0,cloudAltitudeKm/10.0,0);
		if(U>=0)
		{
			float d				=-b + sqrt(U);
			if(dz<0)
				d				=max(d,(-b - sqrt(U)));
			//ret.rgb				=vec3(0,.001*d,0);
			if(d>0&&d<1000.0&&(dist.x>=1.0||dist.x>1000.0*d/maxFadeDistanceMetres))
			{
				//ret.rgb				=vec3(.001*d,0,0);
				vec3 wEyeToPos			=1000.0*view*d;
				vec3 wPosition			=eyePosition+wEyeToPos;
				
	vec3 worldspaceVolumeTexCoordsXyC	=vec3(atan2(view.x,view.y)/(2.0*pi),0.5*(1.0+2.0*asin(view.z)/pi),0);

				vec2 wOffset			=wPosition.xy-origin.xy;
				vec2 texc_global		=wOffset/globalScale;
				vec2 texc_detail		=wOffset/detailScale;
				float alt_texc			=wPosition.z/maxAltitudeMetres;

				vec3 sun_irr			=texture_clamp_lod(lightTableTexture,vec2(alt_texc,0.5/3.0),0).rgb;
				vec3 moon_irr			=texture_clamp_lod(lightTableTexture,vec2(alt_texc,1.5/3.0),0).rgb;
				vec3 ambient_light		=texture_clamp_lod(lightTableTexture,vec2(alt_texc,2.5/3.0),0).rgb*lightResponse.w;
			
				ret						=Clouds2DPS_illum(imageTexture
													,coverageTexture
													,lossTexture
													,volumeInscatterTexture
													,worldspaceVolumeTexCoordsXyC
													,noiseTexture
													,texc_global
													,texc_detail
													,wEyeToPos
													,sun_irr
													,moon_irr
													,ambient_light.rgb
													,lightDir.xyz
													,lightResponse
													,maxFadeDistanceMetres
													,detailDensity);

				ret.rgb					*=exposure*ret.a;
			//	ret.rg					+=.2*frac(100*texc_global.xy);
//				ret.rgb=texture_clamp_lod(volumeInscatterTexture,vec3(atmosTexCoords,1.0),0).rgb;
				ret.a					=1.0-ret.a;
			}
		}
	}
#endif
	outputTexture[pos]	=ret;//vec4(0,0.0,0.5,0.5);
}

void Clouds2D_Fill(uint3 g,uint3 t,bool depth)
{
	uint Z					=cubemapFaceIndex2d[g.z+t.z].x;
	uint2 idx				=uint2(g.xy*8+t.xy);
	uint3 pos				=uint3(targetRange2d[Z].xy+idx,Z);
	//if(pos.x>=edge.x||pos.y>=edge.y)
	//	return;
	//if(pos.x>=targetRange2d[Z].z||pos.y>=targetRange2d[Z].w)
	//	return;
	vec4 u=updateTexture[pos];
	if (u.g<1.0&&u.b>0.0)
	{
		//outputTexture[pos]=vec4(1,0,dist.x,0.5);
		CSClouds2D(pos,depth);
	}
}
void Clouds2D_Amortize(uint3 g,uint3 t,bool depth)
{
	uint2 idx		=uint2(g.xy*8+t.xy);
	uint Z			=cubemapFaceIndex2d[g.z+t.z].x;
	uint3 pos		=uint3(targetRange2d[Z].xy+idx*amortizationScale.xy,Z);
	uint2 offset	=(amortizationOffset.xy + (idx.xy + idx.yx)) % amortizationScale.xy;
	pos.xy += offset;
	if(pos.x>=edge.x||pos.y>=edge.y)
		return;
	if(pos.x>=targetRange2d[Z].z||pos.y>=targetRange2d[Z].w)
		return;
	if(updateTexture[pos].b==0.0)
		return;
	CSClouds2D(pos,depth);
}

CS_LAYOUT(8,8,1)
shader void CS_Clouds2D_Fill(uint3 g: SV_GroupID,uint3 t: SV_GroupThreadID)
{
	Clouds2D_Fill(g,t,true);
}

CS_LAYOUT(8,8,1)
shader void CS_Clouds2D_Fill_NoDepth(uint3 g: SV_GroupID,uint3 t: SV_GroupThreadID)
{
	Clouds2D_Fill(g,t,false);
}


CS_LAYOUT(8,8,1)
shader void CS_Clouds2D_Cubemap(uint3 g: SV_GroupID,uint3 t: SV_GroupThreadID)
{
	uint Z				=cubemapFaceIndex2d[g.z+t.z].x;
	int2 idx			=int2(g.xy*8+t.xy);
	uint3 pos			=uint3(targetRange2d[Z].xy+idx,Z);
//	outputTexture[idx]	=vec4(0,0.0,0.5,0.5);
	CSClouds2D(pos,false);
}

CS_LAYOUT(8,8,1)
shader void CS_Clouds2D(uint3 g: SV_GroupID,uint3 t: SV_GroupThreadID)
{
	Clouds2D_Amortize(g,t,true);
}

CS_LAYOUT(8,8,1)
shader void CS_Clouds2D_NoDepth(uint3 g: SV_GroupID,uint3 t: SV_GroupThreadID)
{
	Clouds2D_Amortize(g,t,false);
}

technique coverage
{
    pass p0
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
        SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_4_0,FullScreenVS()));
		SetPixelShader(CompileShader(ps_4_0,CoveragePS()));
    }
}

technique simple
{
    pass p0
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
        SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_4_0,SimpleVS()));
		SetPixelShader(CompileShader(ps_4_0,SimplePS()));
    }
}

technique show_detail_texture
{
    pass p0
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(AlphaBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
        SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_4_0,SimpleVS()));
		SetPixelShader(CompileShader(ps_4_0,ShowDetailTexturePS()));
    }
}

technique random
{
    pass p0
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
        SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_4_0,FullScreenVS()));
		SetPixelShader(CompileShader(ps_4_0,RandomPS()));
    }
}

technique detail_density
{
    pass p0
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
        SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_4_0,FullScreenVS()));
		SetPixelShader(CompileShader(ps_4_0,DetailPS()));
    }
}

technique detail_lighting
{
    pass p0
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
        SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_4_0,FullScreenVS()));
		SetPixelShader(CompileShader(ps_4_0,DetailLightingPS()));
    }
}

BlendState AlphaBlendX
{
	BlendEnable[0] = TRUE;
	BlendEnable[1] = FALSE;
	SrcBlend = SRC_ALPHA;
	DestBlend = INV_SRC_ALPHA;
    BlendOp = ADD;
    SrcBlendAlpha = ZERO;
    DestBlendAlpha = INV_SRC_ALPHA;
    BlendOpAlpha = ADD;
    RenderTargetWriteMask[0]	=15;
    RenderTargetWriteMask[1]	=15;
};

technique clouds_2d_quad
{
	pass depth 
	{
		SetComputeShader(CompileShader(cs_5_0,CS_Clouds2D()));
	}
	pass no_depth 
	{
		SetComputeShader(CompileShader(cs_5_0,CS_Clouds2D_NoDepth()));
	}
}

technique clouds_2d_fill
{
	pass depth
	{
		SetComputeShader(CompileShader(cs_5_0,CS_Clouds2D_Fill()));
	}
	pass no_depth
	{
		SetComputeShader(CompileShader(cs_5_0,CS_Clouds2D_Fill_NoDepth()));
	}
}

technique clouds_2d_cubemap
{
	pass depth
	{
		SetComputeShader(CompileShader(cs_5_0,CS_Clouds2D_Cubemap()));
	}
	pass no_depth
	{
		SetComputeShader(CompileShader(cs_5_0,CS_Clouds2D_Cubemap()));
	}
}
