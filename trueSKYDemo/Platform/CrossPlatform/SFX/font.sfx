//  Copyright (c) 2015-2016 Simul Software Ltd. All rights reserved.
#include "shader_platform.sl"
#include "../SL/common.sl"
#include "../SL/render_states.sl"
#include "../SL/states.sl"
#include "../SL/text_constants.sl"
uniform Texture2D fontTexture;

shader posTexVertexOutput FontVertexShader(idOnly IN)
{
    posTexVertexOutput OUT	=VS_ScreenQuad(IN,text_rect);
	OUT.texCoords			=vec4(texc.xy+texc.zw*OUT.texCoords.xy,0.0,1.0).xy;
    return OUT;
}

shader vec4 FontPixelShader(posTexVertexOutput IN) : SV_TARGET
{
	vec2 tc	=IN.texCoords;

	// In DX, texcoords start from top left. In GL, sensibly, it's bottom-left.
	tc.y		=1.0-tc.y;

	vec4 lookup	=texture_nearest_lod(fontTexture,tc,0);
	lookup.a	=lookup.r;
	lookup		*=colour;
	//lookup.a=.5;
	//lookup.r=1;
	lookup.a=0.0;
    return lookup;
}

shader vec4 FontBackgroundShader(posTexVertexOutput IN) : SV_TARGET
{
    return background;
}

BlendState AlphaBlendRGB
{
	BlendEnable[0]		= TRUE;
	SrcBlend			= SRC_ALPHA;
	DestBlend			= INV_SRC_ALPHA;
    BlendOp				= ADD;
    SrcBlendAlpha		= ZERO;
    DestBlendAlpha		= ZERO;
    BlendOpAlpha		= ADD;
    RenderTargetWriteMask[0] = 7;
};
BlendState AddBlendRGB
{
	BlendEnable[0]	=TRUE;
	BlendEnable[1]	=TRUE;
	SrcBlend		=ONE;
	DestBlend		=ONE;
    RenderTargetWriteMask[0] = 7;
};

VertexShader vs = CompileShader(vs_4_0, FontVertexShader());
technique backg
{
    pass p0
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(AlphaBlendRGB,vec4( 0.0, 0.0, 0.0, 0.0), 0xFFFFFFFF );
        SetGeometryShader(NULL);
		SetVertexShader(vs);
		SetPixelShader(CompileShader(ps_4_0,FontBackgroundShader()));
    }
}

technique text
{
    pass p0
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(AddBlendRGB,vec4( 0.0, 0.0, 0.0, 0.0), 0xFFFFFFFF );
        SetGeometryShader(NULL);
		SetVertexShader(vs);
		SetPixelShader(CompileShader(ps_4_0,FontPixelShader()));
    }
}